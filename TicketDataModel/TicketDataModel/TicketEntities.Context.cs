//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TicketDataModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Core.Objects;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class TraktatEntities : DbContext
    {
        public TraktatEntities()
            : base("name=TraktatEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Title> Titles { get; set; }
        public DbSet<TitleStatus> TitleStatuses { get; set; }
        public DbSet<Translator> Translators { get; set; }
        public DbSet<PersonalInfo> PersonalInfos { get; set; }
        public DbSet<Office> Offices { get; set; }
        public DbSet<TicketLevel> TicketLevels { get; set; }
        public DbSet<Ticket> Tickets { get; set; }
        public DbSet<TicketStatus> TicketStatuses { get; set; }
        public DbSet<TicketType> TicketTypes { get; set; }
        public DbSet<TicketAttachment> TicketAttachments { get; set; }
        public DbSet<TicketComment> TicketComments { get; set; }
        public DbSet<CalendarPeriod> CalendarPeriods { get; set; }
        public DbSet<JobParticipant> JobParticipants { get; set; }
        public DbSet<Job> Jobs { get; set; }
        public DbSet<JobFile> JobFiles { get; set; }
        public DbSet<Language> Languages { get; set; }
        public DbSet<JobType> JobTypes { get; set; }
        public DbSet<Domain> Domains { get; set; }
        public DbSet<JobStatus> JobStatuses { get; set; }
        public DbSet<JobParticipantStatus> JobParticipantStatuses { get; set; }
        public DbSet<AccountingStatus> AccountingStatuses { get; set; }
        public DbSet<Customer> Customers { get; set; }
        public DbSet<OMKRequestStatus> OMKRequestStatuses { get; set; }
        public DbSet<OCRRequestStatus> OCRRequestStatuses { get; set; }
        public DbSet<MarketingClass> MarketingClasses { get; set; }
        public DbSet<Category> Categories { get; set; }
        public DbSet<EditorialComment> EditorialComments { get; set; }
        public DbSet<TranslatorRole> TranslatorRoles { get; set; }
        public DbSet<Role> Roles { get; set; }
        public DbSet<TranslationDirection> TranslationDirections { get; set; }
        public DbSet<InternalDomain> InternalDomains { get; set; }
        public DbSet<CurrentStatus> CurrentStatus { get; set; }
        public DbSet<PaymentInfo> PaymentInfos { get; set; }
        public DbSet<StaffStatus> StaffStatuses { get; set; }
        public DbSet<AttractionChannel> AttractionChannels { get; set; }
        public DbSet<JobGrade> JobGrades { get; set; }
        public DbSet<ContactAndStatusChangeReportItem> ContactAndStatusChangeReportItems { get; set; }
        public DbSet<tema_active> tema_active { get; set; }
        public DbSet<PaymentItemType> PaymentItemTypes { get; set; }
        public DbSet<PaymentMethod> PaymentMethods { get; set; }
    
        public virtual System.Data.Entity.Core.Objects.ObjectResult<OrphanGradesResult> sp_get_orphanjobgrades(Nullable<System.DateTime> start_date, Nullable<System.DateTime> end_date)
        {
            var start_dateParameter = start_date.HasValue ?
                new System.Data.Entity.Core.Objects.ObjectParameter("start_date", start_date) :
                new System.Data.Entity.Core.Objects.ObjectParameter("start_date", typeof(System.DateTime));
    
            var end_dateParameter = end_date.HasValue ?
                new System.Data.Entity.Core.Objects.ObjectParameter("end_date", end_date) :
                new System.Data.Entity.Core.Objects.ObjectParameter("end_date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OrphanGradesResult>("sp_get_orphanjobgrades", start_dateParameter, end_dateParameter);
        }

        public virtual System.Data.Entity.Core.Objects.ObjectResult<BalanceReportItem> GetBalanceReport(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new System.Data.Entity.Core.Objects.ObjectParameter("startDate", startDate) :
                new System.Data.Entity.Core.Objects.ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new System.Data.Entity.Core.Objects.ObjectParameter("endDate", endDate) :
                new System.Data.Entity.Core.Objects.ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BalanceReportItem>("GetBalanceReport", startDateParameter, endDateParameter);
        }

        public virtual System.Data.Entity.Core.Objects.ObjectResult<ExpensesReport_Result> SP_ExpensesReport(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate)
        {
            var startDateParameter = startDate.HasValue ?
                new System.Data.Entity.Core.Objects.ObjectParameter("startDate", startDate) :
                new System.Data.Entity.Core.Objects.ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new System.Data.Entity.Core.Objects.ObjectParameter("endDate", endDate) :
                new System.Data.Entity.Core.Objects.ObjectParameter("endDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ExpensesReport_Result>("SP_ExpensesReport", startDateParameter, endDateParameter);
        }
    }
}
